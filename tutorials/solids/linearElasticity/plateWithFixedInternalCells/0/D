/*--------------------------------*- C++ -*----------------------------------*\
| solids4foam: solid mechanics and fluid-solid interaction simulations        |
| Version:     v2.0                                                           |
| Web:         https://solids4foam.github.io                                  |
| Disclaimer:  This offering is not approved or endorsed by OpenCFD Limited,  |
|              producer and distributor of the OpenFOAM software via          |
|              www.openfoam.com, and owner of the OPENFOAM® and OpenCFD®      |
|              trade marks.                                                   |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      D;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 0 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    right
    {
        // Example of usage for displacementOrTraction
        type            displacementOrTraction;
        constantDisplacement uniform (0 0 0);
        constantTraction uniform (1e6 0 0);
        // Normal direction will be traction, tangential will be displacement
        specifyNormalDirection uniform -1;
        value           uniform (0 0 0);
    }

    top
    {
        // Example of usage for displacementOrTraction
        type            displacementOrTraction;
        constantDisplacement uniform (0 0 0);
        constantTraction uniform (0 0 0);
        // Normal direction will be displacement, tangential will be traction
        specifyNormalDirection uniform 1;
        value           uniform (0 0 0);
    }

    bottom
    {
        // Example of usage for displacementOrTraction
        type            displacementOrTraction;
        constantDisplacement uniform (0 0 0);
        constantTraction uniform (0 0 0);
        // Patch is just traction (same as solidTraction)
        valueFraction   uniform (0 0 0 0 0 0);
        value           uniform (0 0 0);
    }

    left
    {
        type            fixedDisplacement;
        value           uniform ( 0 0 0 );
    }

    back
    {
         type            empty;
    }

    front
    {
         type            empty;
    }
}

// ************************************************************************* //
