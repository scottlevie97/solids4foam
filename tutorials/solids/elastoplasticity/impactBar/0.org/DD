/*--------------------------------*- C++ -*----------------------------------*\
| solids4foam: solid mechanics and fluid-solid interaction simulations        |
| Version:     v2.0                                                           |
| Web:         https://solids4foam.github.io                                  |
| Disclaimer:  This offering is not approved or endorsed by OpenCFD Limited,  |
|              producer and distributor of the OpenFOAM software via          |
|              www.openfoam.com](https://www.openfoam.com), and owner of the  |
|              OPENFOAM® and OpenCFD® trade marks.                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      DD;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 0 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    loading
    {
        type           fixedDisplacement;
        value          uniform ( 0 0 0 );
    }

    billetContact
    {
        type            solidContact;
        master          no;
        shadowPatch     dieContact;
        value           uniform (0 0 0);
    }

    dieContact
    {
        type            solidContact;
        master          yes;
        rigidMaster     yes;
        shadowPatch     billetContact;
        //useMasterNormals yes;
        //quickReject     distance3D;
        normalContactModel standardPenalty;
        standardPenaltyNormalModelDict
        {
            penaltyScale             1;
            relaxationFactor         0.02;
        }
        frictionContactModel frictionless;
        value           uniform (0 0 0);
    }

    left
    {
        type            solidTraction;
        traction        uniform (0 0 0);
        pressure        uniform 0;
        value           uniform (0 0 0);
    }

    back
    {
        type            solidWedge;
        patchType       wedge;
        value           uniform (0 0 0);
    }

    front
    {
        type            solidWedge;
        patchType       wedge;
        value           uniform (0 0 0);
    }

    axis
    {
        type            empty;
    }
}

// ************************************************************************* //
